version: '3.5'

services:

  # meta-services
  full-stack:
    image: tianon/true
    depends_on: [koan, kali, openvas, zap]

  tool-stack:
    image: tianon/true
    depends_on: [openvas, zap]
  
  openvas:
    image: tianon/true
    depends_on: 
      - gvm-tools


  koan: 
    container_name: Koan
    build:
      context: ./Koan
    # entrypoint: "/bin/bash"
    entrypoint: "mitmweb --web-host 0.0.0.0 --set block_global=false"
    sysctls:
      - net.ipv4.ip_forward=1
      - net.ipv6.conf.all.forwarding=1
      - net.ipv6.conf.all.disable_ipv6=0
      - net.ipv4.conf.all.send_redirects=1
    cap_add:
          - ALL
          # - NET_ADMIN
          # - SYS_MODULE
    privileged: true
    restart: always
    environment:
      database: "${database}"
      TOR_CREDS: "${TOR_CREDS}"
      TOR_CRED_HASH: "${TOR_CRED_HASH}"
      # http_proxy: "${koan_http_proxy}"
    logging:
      driver: fluentd
      options:
        fluentd-async-connect: 'true'
        fluentd-address: '192.168.3.201:24224'
    networks:
      - traefik
    ports:
      - '8083:8081'
    
    # depends_on:
    #   - ca_authority
  
  # ettercap:
  #   container_name: hack-ettercap
  #   image: mrecco/ettercap:latest
  #   command:
  #   - "-TbqM"
  #   - "arp"
  #   - "-oi"
  #   - "interface_name"
  #   network_mode: host
  #   pid: host
  #   # privileged: true
  #   cap_add:
  #   - NET_ADMIN
  #   - SYS_ADMIN
  #   stop_grace_period: 3s
  #   restart: always
  #   depends_on:
  #     - koan
  #   environment:
  #     # http_proxy: "${http_proxy}"
  #     database: "${database}"
  #   networks:
  #     - external

  kali: # Command and control
    container_name: Kali
    build:
      context: ./Kali
    # entrypoint: Scripts/pyenv_init.sh
    tty: true
    restart: always
    depends_on:
      - koan
    ports:
      - ${VNCPORT}:${VNCPORT}
      - ${NOVNCPORT}:${NOVNCPORT}
    environment:
      # http_proxy: "${http_proxy}"
      database: "${database}"
      VNCEXPOSE: ${VNCEXPOSE}
      VNCPORT: ${VNCPORT}
      VNCPWD: ${VNCPWD}
      VNCDISPLAY_SIZE: ${VNCDISPLAY_SIZE}
      VNCDEPTH: ${VNCDEPTH}
      NOVNCPORT: ${NOVNCPORT}
      MSFDB_PORT: 5432
    networks:
      - external
    volumes:
      - ./Kali/database.yml:/usr/share/metasploit-framework/config/database.yml
    logging:
        driver: fluentd
        options:
          fluentd-async-connect: 'true'
          fluentd-address: '192.168.3.201:24224'
    entrypoint: [ "/bin/bash", "/pyenv_init.sh"  ]
    networks:
      - postgres
      - vnc
      # - traefik

  guacamole:
    image: guacamole/guacamole:latest
    container_name: guacamole
    restart: unless-stopped
    environment:
      - GUACD_HOSTNAME=guacd
      - POSTGRESQL_HOSTNAME=database
      - POSTGRESQL_PORT=5432
      - POSTGRESQL_DATABASE=guacamole_database
      - POSTGRESQL_USER=postgres
      - POSTGRESQL_PASSWORD=your_password_here
    # volumes:
      # - ./Guacamole/logback.xml:/home/guacamole/.guacamole/logback.xml
      # - ./Guacamole/guac_service_discovery:/home/guacamole/guac_service_discovery
    logging:
        driver: fluentd
        options:
          fluentd-async-connect: 'true'
          fluentd-address: '192.168.3.201:24224'
    ports:
      - "8080:8080"
    depends_on:
      - guacd
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik"
      - "traefik.http.routers.guacamole.rule=Host(`guacamole.localhost`, `guacamole.traefik.internal`)"
      - "traefik.http.services.guacamole.loadbalancer.server.port=8080"
      - "traefik.http.services.guacamole.loadbalancer.server.scheme=http"
      # - "traefik.http.middlewares.guacamole=my-ipwhitelist"
      - "traefik.http.middlewares.test-ipwhitelist.ipwhitelist.sourcerange=127.0.0.1/32, 192.168.3.201, 192.168.3.196"
      - "traefik.http.routers.guacamole.middlewares=guacamole-auth, test-ipwhitelist"
      - "traefik.http.middlewares.guacamole-auth.basicauth.usersfile=/htpasswd.txt"
    networks:
      - traefik
      - postgres
      - vnc

  guacd:
    image: guacamole/guacd:latest
    container_name: guacd
    restart: unless-stopped
    logging:
        driver: fluentd
        options:
          fluentd-async-connect: 'true'
          fluentd-address: '192.168.3.201:24224'
    networks:
      - vnc
  
  # guac_service_discovery
  gsd:
    container_name: gsd
    build:
      context: ./Guacamole/guac_service_discovery
    restart: "no"
    logging:
        driver: fluentd
        options:
          fluentd-async-connect: 'true'
          fluentd-address: '192.168.3.201:24224'
    volumes:
      - "./Guacamole/guac_service_discovery/gsd.py:/gsd.py"
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - postgres

  network_scanner:
    container_name: nework_scanner
    image: instrumentisto/nmap
    command: ["nmap", "-sn", "192.168.3.0/24", "-oG", "/scan_results/scan.txt"]
    volumes:
      - ./scan_results:/scan_results
    logging:
        driver: fluentd
        options:
          fluentd-async-connect: 'true'
          fluentd-address: '192.168.3.201:24224'
  
  zap:
    container_name: zap
    image: owasp/zap2docker-stable 
    ports: 
      - 8080:8080 
    entrypoint: ["zap.sh", "-daemon", "-host", "0.0.0.0", "-port", "8080"]
    logging:
        driver: fluentd
        options:
          fluentd-async-connect: 'true'
          fluentd-address: '192.168.3.201:24224'

  # OpenVAS  

  vulnerability-tests:
    image: greenbone/vulnerability-tests
    environment:
      STORAGE_PATH: /var/lib/openvas/22.04/vt-data/nasl
    volumes:
      - vt_data_vol:/mnt
    logging:
        driver: fluentd
        options:
          fluentd-async-connect: 'true'
          fluentd-address: '192.168.3.201:24224'

  notus-data:
    image: greenbone/notus-data
    volumes:
      - notus_data_vol:/mnt
    logging:
        driver: fluentd
        options:
          fluentd-async-connect: 'true'
          fluentd-address: '192.168.3.201:24224'

  scap-data:
    image: greenbone/scap-data
    volumes:
      - scap_data_vol:/mnt
    logging:
        driver: fluentd
        options:
          fluentd-async-connect: 'true'
          fluentd-address: '192.168.3.201:24224'

  cert-bund-data:
    image: greenbone/cert-bund-data
    volumes:
      - cert_data_vol:/mnt
    logging:
        driver: fluentd
        options:
          fluentd-async-connect: 'true'
          fluentd-address: '192.168.3.201:24224'

  dfn-cert-data:
    image: greenbone/dfn-cert-data
    volumes:
      - cert_data_vol:/mnt
    depends_on:
      - cert-bund-data
    logging:
        driver: fluentd
        options:
          fluentd-async-connect: 'true'
          fluentd-address: '192.168.3.201:24224'

  data-objects:
    image: greenbone/data-objects
    volumes:
      - data_objects_vol:/mnt
    logging:
        driver: fluentd
        options:
          fluentd-async-connect: 'true'
          fluentd-address: '192.168.3.201:24224'

  report-formats:
    image: greenbone/report-formats
    volumes:
      - data_objects_vol:/mnt
    depends_on:
      - data-objects
    logging:
        driver: fluentd
        options:
          fluentd-async-connect: 'true'
          fluentd-address: '192.168.3.201:24224'

  gpg-data:
    image: greenbone/gpg-data
    volumes:
      - gpg_data_vol:/mnt
    logging:
        driver: fluentd
        options:
          fluentd-async-connect: 'true'
          fluentd-address: '192.168.3.201:24224'

  redis-server:
    image: greenbone/redis-server
    restart: on-failure
    volumes:
      - redis_socket_vol:/run/redis/
    logging:
        driver: fluentd
        options:
          fluentd-async-connect: 'true'
          fluentd-address: '192.168.3.201:24224'

  pg-gvm:
    image: greenbone/pg-gvm:stable
    restart: on-failure
    volumes:
      - psql_data_vol:/var/lib/postgresql
      - psql_socket_vol:/var/run/postgresql
    logging:
        driver: fluentd
        options:
          fluentd-async-connect: 'true'
          fluentd-address: '192.168.3.201:24224'

  gvmd:
    image: greenbone/gvmd:stable
    restart: on-failure
    volumes:
      - gvmd_data_vol:/var/lib/gvm
      - scap_data_vol:/var/lib/gvm/scap-data/
      - cert_data_vol:/var/lib/gvm/cert-data
      - data_objects_vol:/var/lib/gvm/data-objects/gvmd
      - vt_data_vol:/var/lib/openvas/plugins
      - psql_data_vol:/var/lib/postgresql
      - gvmd_socket_vol:/run/gvmd
      - ospd_openvas_socket_vol:/run/ospd
      - psql_socket_vol:/var/run/postgresql
    depends_on:
      pg-gvm:
        condition: service_started
      scap-data:
        condition: service_completed_successfully
      cert-bund-data:
        condition: service_completed_successfully
      dfn-cert-data:
        condition: service_completed_successfully
      data-objects:
        condition: service_completed_successfully
      report-formats:
        condition: service_completed_successfully
    logging:
        driver: fluentd
        options:
          fluentd-async-connect: 'true'
          fluentd-address: '192.168.3.201:24224'

  gsa:
    image: greenbone/gsa:stable
    restart: on-failure
    ports:
      - 9392:80
    volumes:
      - gvmd_socket_vol:/run/gvmd
    depends_on:
      - gvmd
    logging:
        driver: fluentd
        options:
          fluentd-async-connect: 'true'
          fluentd-address: '192.168.3.201:24224'

  ospd-openvas:
    image: greenbone/ospd-openvas:stable
    restart: on-failure
    init: true
    hostname: ospd-openvas.local
    cap_add:
      - NET_ADMIN # for capturing packages in promiscuous mode
      - NET_RAW # for raw sockets e.g. used for the boreas alive detection
    security_opt:
      - seccomp=unconfined
      - apparmor=unconfined
    command:
      [
        "ospd-openvas",
        "-f",
        "--config",
        "/etc/gvm/ospd-openvas.conf",
        "--mqtt-broker-address",
        "mqtt-broker",
        "--notus-feed-dir",
        "/var/lib/notus/advisories",
        "-m",
        "666"
      ]
    volumes:
      - gpg_data_vol:/etc/openvas/gnupg
      - vt_data_vol:/var/lib/openvas/plugins
      - notus_data_vol:/var/lib/notus
      - ospd_openvas_socket_vol:/run/ospd
      - redis_socket_vol:/run/redis/
    depends_on:
      redis-server:
        condition: service_started
      gpg-data:
        condition: service_completed_successfully
      vulnerability-tests:
        condition: service_completed_successfully
    logging:
        driver: fluentd
        options:
          fluentd-async-connect: 'true'
          fluentd-address: '192.168.3.201:24224'

  mqtt-broker:
    restart: on-failure
    image: greenbone/mqtt-broker
    ports:
      - 1883:1883
    networks:
      default:
        aliases:
          - mqtt-broker
          - broker
    logging:
        driver: fluentd
        options:
          fluentd-async-connect: 'true'
          fluentd-address: '192.168.3.201:24224'

  notus-scanner:
    restart: on-failure
    image: greenbone/notus-scanner:stable
    volumes:
      - notus_data_vol:/var/lib/notus
      - gpg_data_vol:/etc/openvas/gnupg
    environment:
      NOTUS_SCANNER_MQTT_BROKER_ADDRESS: mqtt-broker
      NOTUS_SCANNER_PRODUCTS_DIRECTORY: /var/lib/notus/products
    depends_on:
      - mqtt-broker
      - gpg-data
      - vulnerability-tests
    logging:
        driver: fluentd
        options:
          fluentd-async-connect: 'true'
          fluentd-address: '192.168.3.201:24224'

  gvm-tools:
    image: greenbone/gvm-tools
    volumes:
      - gvmd_socket_vol:/run/gvmd
      - ospd_openvas_socket_vol:/run/ospd
    depends_on:
      - gvmd
      - ospd-openvas
    logging:
        driver: fluentd
        options:
          fluentd-async-connect: 'true'
          fluentd-address: '192.168.3.201:24224'



volumes:

  gpg_data_vol:
  scap_data_vol:
  cert_data_vol:
  data_objects_vol:
  gvmd_data_vol:
  psql_data_vol:
  vt_data_vol:
  notus_data_vol:
  psql_socket_vol:
  gvmd_socket_vol:
  ospd_openvas_socket_vol:
  redis_socket_vol:
 
  housten:
    driver: local
    driver_opts:
        type: none
        o: bind
        device: ./Housten/data



networks:
    postgres:
      external: true

    traefik:
      external: true

    vnc:
      name: vnc
      driver: overlay
      # internal: true
      driver_opts:
        encrypted: "true"
        scope: local
      